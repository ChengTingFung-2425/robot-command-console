{% extends "base.html.j2" %}

{% block styles %}
{{ super() }}
<link rel="stylesheet" href="{{ url_for('static', filename='css/blockly_workspace.css') }}">
{% endblock %}

{% block scripts %}
{{ super() }}
<!-- Blockly 核心庫 -->
<script src="https://unpkg.com/blockly/blockly.min.js"></script>
<!-- 自定義機器人積木 -->
<script src="{{ url_for('static', filename='js/robot_blocks.js') }}"></script>

<script>
// Blockly 工作區實例
var workspace;
var isDirty = false;
// 伺服器可注入的已驗證進階指令清單（例：['patrol_A', 'dance_show']）
var VERIFIED_ADVANCED_COMMANDS = window.VERIFIED_ADVANCED_COMMANDS || {{ verified_advanced_commands|tojson|safe }} || [];
// Server-provided duration unit preference (s or ms)
window.DURATION_UNIT = window.DURATION_UNIT || '{{ duration_unit }}';

// 初始化 Blockly
document.addEventListener('DOMContentLoaded', function() {
  workspace = Blockly.inject('blocklyDiv', {
    toolbox: ROBOT_TOOLBOX,
    grid: {
      spacing: 20,
      length: 3,
      colour: '#ccc',
      snap: true
    },
    zoom: {
      controls: true,
      wheel: true,
      startScale: 1.0,
      maxScale: 3,
      minScale: 0.3,
      scaleSpeed: 1.2
    },
    trashcan: true,
    scrollbars: true,
    sounds: true,
    renderer: 'zelos'
  });

  // 監聽工作區變更
  workspace.addChangeListener(function(event) {
    if (event.type === Blockly.Events.BLOCK_CHANGE ||
        event.type === Blockly.Events.BLOCK_CREATE ||
        event.type === Blockly.Events.BLOCK_DELETE ||
        event.type === Blockly.Events.BLOCK_MOVE) {
      updateCodePreview();
      isDirty = true;
    }
  });

  // 載入現有積木（如果有）
  var savedBlocks = document.getElementById('saved_blocks').value;
  if (savedBlocks) {
    try {
      var xml = Blockly.Xml.textToDom(savedBlocks);
      Blockly.Xml.domToWorkspace(xml, workspace);
    } catch (e) {
      console.error('載入積木失敗:', e);
    }
  }
  
  // 移除任何舊版的 JSON 預覽元素（若有殘留）
  var oldJsonPreview = document.getElementById('json-preview');
  if (oldJsonPreview) {
    oldJsonPreview.remove();
  }
  updateCodePreview();

  // 恢復 verify 面板的摺疊狀態 （server-side 優先，client localStorage 為次）
  try {
    var serverVerifyCollapsed = {{ 'true' if verify_collapsed else 'false' }};
    var localVerify = (localStorage.getItem && localStorage.getItem('verifyCollapsed') === '1');
    var verifyCollapsed = serverVerifyCollapsed || localVerify;
    if (verifyCollapsed) {
      document.getElementById('verifyCol').classList.add('collapsed');
      var btn = document.getElementById('verify-toggle');
      if (btn) btn.textContent = '▸';
      if (workspace && typeof workspace.resize === 'function') {
        setTimeout(function(){ workspace.resize(); }, 50);
      }
    }
  } catch (e) {}
});

// 切換驗證面板摺疊
function toggleVerifyPanel() {
  var col = document.getElementById('verifyCol');
  var btn = document.getElementById('verify-toggle');
  if (!col) return;
  var collapsed = col.classList.toggle('collapsed');
  if (btn) btn.textContent = collapsed ? '▸' : '▾';
  try { localStorage.setItem('verifyCollapsed', collapsed ? '1' : '0'); } catch (e) {}
  try { fetch('{{ url_for("webui.update_ui_settings") }}', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({verify_collapsed: collapsed ? '1' : '0'})}); } catch (e) {}
  // 讓 Blockly 重新調整大小（重要）
  if (workspace && typeof workspace.resize === 'function') {
    setTimeout(function(){ workspace.resize(); }, 200);
  }
}

// 更新程式碼預覽
function updateCodePreview() {
  var json = generateCommandJSON(workspace);
  document.getElementById('base_commands').value = json;
  // 右側改為驗證面板，不直接顯示 JSON
  // 計算預估執行時間
  updateEstimatedTime(json);
}

// 計算預估執行時間
function updateEstimatedTime(jsonString) {
  try {
    var commands = JSON.parse(jsonString);
    var totalTime = 0;
    
    // 從 Robot-Console/tools.py 提取的時間對應表
    var actionTimes = {
      "go_forward": 3.5, "back_fast": 4.5, "turn_left": 4, "turn_right": 4,
      "left_move_fast": 3, "right_move_fast": 3, "stand": 1, "bow": 4,
      "squat": 1, "stand_up_front": 5, "stand_up_back": 5, "wave": 3.5,
      "left_kick": 2, "right_kick": 2, "kung_fu": 2, "wing_chun": 2,
      "left_uppercut": 2, "right_uppercut": 2, "left_shot_fast": 4, "right_shot_fast": 4,
      "dance_two": 52, "dance_three": 70, "dance_four": 59, "dance_five": 59,
      "dance_six": 69, "dance_seven": 67, "dance_eight": 85, "dance_nine": 84, "dance_ten": 85,
      "push_ups": 9, "sit_ups": 12, "chest": 9, "weightlifting": 9,
      "squat_up": 6, "twist": 4, "stepping": 3, "stop": 3
    };
    
    commands.forEach(function(cmd) {
      if (cmd.command === 'wait' && cmd.duration_ms) {
        totalTime += cmd.duration_ms / 1000;
      } else if (actionTimes[cmd.command]) {
        totalTime += actionTimes[cmd.command];
      }
    });
    
    var minutes = Math.floor(totalTime / 60);
    var seconds = Math.floor(totalTime % 60);
    var timeText = minutes > 0 
      ? `約 ${minutes} 分 ${seconds} 秒` 
      : `約 ${seconds} 秒`;
    
    document.getElementById('estimated-time').textContent = timeText;
    document.getElementById('block-count').textContent = commands.length;
  } catch (e) {
    document.getElementById('estimated-time').textContent = '計算中...';
    document.getElementById('block-count').textContent = '0';
  }
}

// 儲存積木狀態
function saveBlocklyState() {
  var xml = Blockly.Xml.workspaceToDom(workspace);
  var xmlText = Blockly.Xml.domToText(xml);
  document.getElementById('saved_blocks').value = xmlText;
}

// 清空工作區
function clearWorkspace() {
  if (confirm('確定要清空所有積木嗎？此操作無法復原。')) {
    workspace.clear();
    isDirty = false;
  }
}

// 匯出積木
function exportBlocks() {
  var xml = Blockly.Xml.workspaceToDom(workspace);
  var xmlText = Blockly.Xml.domToText(xml);
  
  var blob = new Blob([xmlText], {type: 'text/xml'});
  var url = URL.createObjectURL(blob);
  var a = document.createElement('a');
  a.href = url;
  a.download = 'robot_command_blocks.xml';
  a.click();
  URL.revokeObjectURL(url);
}

// 匯入積木
function importBlocks() {
  var input = document.createElement('input');
  input.type = 'file';
  input.accept = '.xml';
  input.onchange = function(e) {
    var file = e.target.files[0];
    var reader = new FileReader();
    reader.onload = function(event) {
      try {
        var xml = Blockly.Xml.textToDom(event.target.result);
        workspace.clear();
        Blockly.Xml.domToWorkspace(xml, workspace);
        isDirty = true;
        // 匯入完成
      } catch (err) {
        alert('匯入失敗：無效的積木檔案');
        console.error(err);
      }
    };
    reader.readAsText(file);
  };
  input.click();
}

// 驗證指令的簡單前端檢查（會顯示檢查結果在右側面板）
function validateCommands() {
  var json = generateCommandJSON(workspace);
  var resultEl = document.getElementById('verify-result');
  try {
    var parsed = JSON.parse(json);
    if (!Array.isArray(parsed) || parsed.length === 0) {
      resultEl.textContent = '驗證結果：失敗 - 工作區沒有任何動作，至少需要一個動作。';
      return;
    }
    // 驗證每個指令的基本欄位，並特別處理 advanced 指令
    var invalids = [];
    parsed.forEach(function(cmd, idx) {
      if (!cmd.command) {
        invalids.push('第 ' + (idx+1) + ' 個指令缺少 command 欄位');
        return;
      }

      // advanced 指令需包含 name 與 verified 並且在伺服器白名單中
      if (cmd.advanced) {
        var name = cmd.name || '';
        var verifiedFlag = !!cmd.verified;
        if (!name) {
          invalids.push('第 ' + (idx+1) + ' 個進階指令未指定名稱');
          return;
        }
        if (!verifiedFlag) {
          invalids.push('第 ' + (idx+1) + ' 個進階指令 (' + name + ') 未標記為已驗證');
          return;
        }
        // 若後端提供 VERIFIED_ADVANCED_COMMANDS，需在白名單中
        if (VERIFIED_ADVANCED_COMMANDS && VERIFIED_ADVANCED_COMMANDS.length > 0) {
          if (VERIFIED_ADVANCED_COMMANDS.indexOf(name) === -1) {
            invalids.push('第 ' + (idx+1) + ' 個進階指令 (' + name + ') 未在已驗證清單中');
            return;
          }
        }
      }
    });
    if (invalids.length > 0) {
      resultEl.textContent = '驗證結果：失敗\n' + invalids.join('\n');
      return;
    } else {
      // 進一步前端驗證 duration 欄位
      var durationErrors = frontendVerifyDurations(parsed);
      if (durationErrors.length > 0) {
        resultEl.textContent = '驗證結果：失敗\n' + durationErrors.join('\n');
        return;
      }
      resultEl.textContent = '驗證結果：通過 \n指令數量：' + parsed.length;
    }
  } catch (e) {
    resultEl.textContent = '驗證結果：失敗 - JSON 解析錯誤';
  }
}

// 確保 starter block 永遠存在，若被移除則自動補回
// NOTE: ensureStarterExists removed — starter is now available from toolbox and draggable by the user.

// 表單提交前儲存積木狀態
document.addEventListener('DOMContentLoaded', function() {
  var form = document.querySelector('form');
  if (form) {
    form.addEventListener('submit', function(e) {
      saveBlocklyState();
    });
  }
});

// 初始化時間單位偏好（秒 / 毫秒）
document.addEventListener('DOMContentLoaded', function() {
  try {
    var pref = localStorage.getItem('durationUnit') || 's';
    window.DURATION_UNIT = pref;
    if (pref === 'ms') {
      document.getElementById('unit_ms').checked = true;
    } else {
      document.getElementById('unit_s').checked = true;
    }
  } catch (e) {}

  // 綁定切換事件
  var unitS = document.getElementById('unit_s');
  var unitMs = document.getElementById('unit_ms');
  function updateDurationUnit(unit) {
    try {
      localStorage.setItem('durationUnit', unit);
      window.DURATION_UNIT = unit;
    } catch (e) {}
    try {
      postDurationUnitSetting(unit);
    } catch (e) {}
  }
  function postDurationUnitSetting(unit) {
    fetch('{{ url_for("webui.update_ui_settings") }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ duration_unit: unit })
    });
  }
  if (unitS) unitS.addEventListener('change', function() {
    if (this.checked) {
      updateDurationUnit('s');
    }
  });
  if (unitMs) unitMs.addEventListener('change', function() {
    if (this.checked) {
      updateDurationUnit('ms');
    }
  });
});

// 前端驗證：檢查移動類積木的 duration 欄位
// 若使用秒，允許 0.1 ~ 600；若毫秒，允許 100 ~ 600000
function frontendVerifyDurations(parsedCommands) {
  var errors = [];
  parsedCommands.forEach(function(cmd, idx){
    // 只檢查已知的移動動作
    var moveActions = ['go_forward','back_fast','turn_left','turn_right','left_move_fast','right_move_fast'];
    if (moveActions.indexOf(cmd.command) !== -1) {
      if (cmd.duration_s === undefined && cmd.duration_ms === undefined) {
        errors.push('第 ' + (idx+1) + ' 個動作 ('+cmd.command+') 缺少持續時間');
        return;
      }
      var unit = (window.DURATION_UNIT) || (localStorage.getItem && localStorage.getItem('durationUnit')) || 's';
      if (cmd.duration_s !== undefined) {
        var v = parseFloat(cmd.duration_s);
        if (isNaN(v) || v < 0.1 || v > 600) errors.push('第 ' + (idx+1) + ' 個動作 ('+cmd.command+') 的持續時間需介於 0.1~600 秒');
      } else if (cmd.duration_ms !== undefined) {
        var v = parseInt(cmd.duration_ms,10);
        if (isNaN(v) || v < 100 || v > 600000) errors.push('第 ' + (idx+1) + ' 個動作 ('+cmd.command+') 的持續時間需介於 100~600000 毫秒');
      }
    }
  });
  return errors;
}
</script>
{% endblock %}

{% block app_content %}
<div class="container-fluid">
  <div class="row">
    <div class="col-12">
      <h2>🧩 建立進階指令（程式積木編輯器）</h2>
      <p class="text-muted">使用拖放式積木來組合機器人動作序列，無需手動編寫 JSON。</p>
    </div>
  </div>

  <form method="POST" action="{% if editing and cmd %}{{ url_for('webui.edit_advanced_command', cmd_id=cmd.id) }}{% else %}{{ url_for('webui.create_advanced_command') }}{% endif %}">
    {{ form.hidden_tag() }}
    
    <div class="row mt-3">
      <!-- 左側：基本資訊 -->
      <div class="col-md-2">
        <div class="card">
          <div class="card-header bg-primary text-white">
            <h5 class="mb-0">📝 指令資訊</h5>
          </div>
          <div class="card-body">
            <div class="form-group">
              {{ form.name.label(class="form-label") }}
              {{ form.name(class="form-control", placeholder="例：巡邏路線A") }}
              {% if form.name.errors %}
                <div class="invalid-feedback d-block">
                  {% for error in form.name.errors %}<span>{{ error }}</span>{% endfor %}
                </div>
              {% endif %}
            </div>

            <div class="form-group mt-3">
              {{ form.category.label(class="form-label") }}
              {{ form.category(class="form-control", placeholder="例：巡邏") }}
              {% if form.category.errors %}
                <div class="invalid-feedback d-block">
                  {% for error in form.category.errors %}<span>{{ error }}</span>{% endfor %}
                </div>
              {% endif %}
            </div>

            <div class="form-group mt-3">
              {{ form.description.label(class="form-label") }}
              {{ form.description(class="form-control", rows=4, placeholder="描述指令的用途與行為...") }}
              {% if form.description.errors %}
                <div class="invalid-feedback d-block">
                  {% for error in form.description.errors %}<span>{{ error }}</span>{% endfor %}
                </div>
              {% endif %}
            </div>

            <div class="form-group mt-3">
              {{ form.version.label(class="form-label") }}
              {{ form.version(class="form-control", min=1) }}
              {% if form.version.errors %}
                <div class="invalid-feedback d-block">
                  {% for error in form.version.errors %}<span>{{ error }}</span>{% endfor %}
                </div>
              {% endif %}
            </div>

            <hr>

            <div class="alert alert-info">
              <strong>📊 統計資訊</strong><br>
              積木數量：<span id="block-count">0</span><br>
              預估時間：<span id="estimated-time">0 秒</span>
            </div>

            <div class="d-grid gap-2 mt-3">
              {{ form.submit(class="btn btn-success btn-lg") }}
              <button type="button" class="btn btn-outline-secondary" onclick="clearWorkspace()">🗑️ 清空</button>
              <button type="button" class="btn btn-outline-primary" onclick="exportBlocks()">💾 匯出積木</button>
              <button type="button" class="btn btn-outline-primary" onclick="importBlocks()">📂 匯入積木</button>
            </div>
            <div class="mt-3">
              <label class="form-label">時間單位偏好</label>
              <div class="btn-group" role="group" aria-label="Duration unit">
                <input type="radio" class="btn-check" name="durationUnit" id="unit_s" autocomplete="off" {% if duration_unit == 's' %}checked{% endif %}>
                <label class="btn btn-outline-secondary" for="unit_s">秒 (s)</label>

                <input type="radio" class="btn-check" name="durationUnit" id="unit_ms" autocomplete="off" {% if duration_unit == 'ms' %}checked{% endif %}>
                <label class="btn btn-outline-secondary" for="unit_ms">毫秒 (ms)</label>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- 左側第二欄：待驗證 (To verify) -->
  <div id="verifyCol" class="col-md-3 {% if verify_collapsed %}collapsed{% endif %}">
        <div class="card">
          <div class="card-header bg-info text-white">
            <h5 class="mb-0">待驗證 (To verify)
              <button id="verify-toggle" class="btn btn-sm btn-light ms-2 float-end" onclick="toggleVerifyPanel()" aria-expanded="true" title="摺疊/展開待驗證面板">▾</button>
            </h5>
          </div>
          <div class="card-body">
            <div id="verify-panel" class="bg-light p-3" style="height: 600px; overflow-y: auto; font-size: 0.95rem; border-radius: 4px;">
              <h5>🔎 待驗證 (To verify)</h5>
              <p id="verify-desc">按下「驗證指令」來檢查目前工作區組合是否符合後端契約與白名單。</p>
              <div class="mt-3">
                <button type="button" class="btn btn-primary" onclick="validateCommands()">✅ 驗證指令</button>
              </div>
              <hr>
              <div id="verify-result" style="white-space: pre-wrap; font-size:0.9rem;">尚未驗證</div>
            </div>
          </div>
        </div>
      </div>

      <!-- 中間：Blockly 工作區（擴大向右） -->
  <div class="col-md-7" id="blocklyCol">
        <div class="card">
          <div class="card-header bg-success text-white">
            <h5 class="mb-0">🧩 積木工作區</h5>
          </div>
          <div class="card-body p-0">
            <div id="blocklyDiv" style="height: 600px; width: 100%;"></div>
          </div>
        </div>
        
        <div class="alert alert-warning mt-3">
          <strong>💡 提示：</strong>
          <ul class="mb-0">
            <li>從左側工具箱拖曳積木到工作區</li>
            <li>積木可自由組合、排序與刪除</li>
            <li>使用「重複」積木可循環執行動作</li>
            <li>使用「等待」積木可在動作間暫停</li>
          </ul>
        </div>
      </div>

      <!-- 右側：空白占位（保留響應式間距） -->
      <div class="col-md-0 d-none d-md-block"></div>
    </div>

    <!-- 隱藏欄位：儲存 JSON 與積木狀態 -->
    {{ form.base_commands(id="base_commands", style="display: none;") }}
    <input type="hidden" id="saved_blocks" name="saved_blocks" value="">
  </form>
</div>
{% endblock %}
